#!/usr/bin/env python
import os
import sys
from cement.core import foundation, handler, backend
from scilifelab.pm.lib.config import config_defaults
from scilifelab.pm import PmApp
from scilifelab.pm.core.controller import PmController
from scilifelab.pm.core.output import PmOutputHandler
from scilifelab.pm.core.project import ProjectController, BcbioRunController, ProjectRmController
from scilifelab.pm.core.archive import ArchiveController
from scilifelab.pm.core.production import ProductionController
from scilifelab.pm.core.deliver import DeliveryController, DeliveryReportController
import logbook
from scilifelab.log import LOG

CONFIGFILE=os.path.join(os.getenv("HOME"), ".pm", "pm.conf")
PLUGINDIR=os.path.join(os.getenv("HOME"), ".pm", "plugins")
PLUGINCONFIGDIR=os.path.join(os.getenv("HOME"), ".pm", "plugins.d")

app = PmApp('pm', 
            base_controller = PmController, 
            config_defaults = config_defaults,
            output_handler = PmOutputHandler, 
            config_files = [CONFIGFILE], 
            extensions = ['json',
                          'scilifelab.pm.ext.ext_distributed',                        
                          'scilifelab.pm.ext.ext_hs_metrics',
                          'scilifelab.pm.ext.ext_qc',
                          'scilifelab.pm.ext.ext_couchdb',
                          ],
            plugin_dir = PLUGINDIR,
            plugin_config_dir = PLUGINCONFIGDIR,
            )

try:
    handler.register(ProjectController)
    handler.register(ArchiveController)
    handler.register(ProductionController)
    handler.register(BcbioRunController)
    handler.register(ProjectRmController)
    handler.register(DeliveryController)
    handler.register(DeliveryReportController)
    app.setup()
    LOG.level = logbook.lookup_level(app.log.get_level())
    LOG.level = 2
    print "console level {}".format(app.log._console_handler.level)
    print "file level {}".format(app.log._file_handler.level)
    print "default time string {}".format(app.log._console_handler.default_format_string)
    print "my time string {}".format(app.log._console_handler.format_string)
    for h in app.log.backend.handlers:
        h.push_application()
    #with app.log.log_setup.applicationbound():
    app.log.info("An info message")
    LOG.debug("Debug message from other logger")
    LOG.info("infoLOG message from other logger")
    LOG.info("third message from other logger")
    try:
        app.config.parse_file(CONFIGFILE)
    except:
        app.log.warn("No config file %s; please create and set relevant config sections" % CONFIGFILE)
        sys.exit()
    app.run()
    app.render(app._output_data)
finally:
    app.close()

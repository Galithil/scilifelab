#!/usr/bin/env python

import sys
import logbook
import ConfigParser
import os
import json

from logbook.queues import RedisHandler

l = logbook.Logger('Script', level=logbook.INFO)

def load_config():
    """Loads a configuration file.

    By default it assumes ~/.pm/pm.conf
    """
    try:
        config_file = os.path.join(os.environ('HOME'), '.pm', 'pm.conf')
        config = ConfigParser.SafeConfigParser()
        with open(config_file) as f:
            config.readfp(f)
        return config
    except IOError:
        raise IOError('There was a problem loading the configuration file. \
                Please make sure that {} exists and that you have \
                read permissions'.format(config_file))


if __name__=='__main__':

    DESCRIPTION= """This script takes input from stdin and, for each read line,
    sends it to a Redis DB in a formatted record.

    The script expects a file ~/.pm/pm.conf with information about Redis parameters:

        [log]
            redis_host = *
            redis_port = *
            redis_key = *
            redis_password = *

    Arguments:
        --help:     Prints this help.
        -f <field>: Adds the field <field> to the key "program" in the fields to
                    be added to the Redis record. If the argument <field> is 
                    json formatted, a new field will be added for each key in the
                    resulting python dictionary.

    Usge:
        your_script | stdin_to_redis -f <field>

        Example:
            cat file.txt | stdin_to_redis -f cat
            cat file.txt | stdin_to_redis -f '{"program":"cat", "file":"file.txt"}'
    """

    if len(sys.argv) > 1 and sys.argv[1] == '-f':
        h = logbook.StreamHandler(sys.stdout, bubble=True)
        # Try to convert the -f param to a dict, otherwise add it as "program" key
        _extra_fields = {}
        try:
            _extra_fields = json.loads(sys.argv[2])
        except:
            _extra_fields['program'] = str(sys.argv[2])
        try:
            config = load_config()
            host = config.get('log', 'redis_host')
            port = config.getint('log', 'redis_port')
            key = config.get('log', 'redis_key')
            password = config.get('log', 'redis_password')
            h = RedisHandler(host=host, port=port, key=key, password=password,
                    extra_fields=_extra_fields, level=logbook.INFO, bubble=True)
        except:
            l.warn('Not loading RedisHandler')
            pass
        with h.applicationbound():
            for input_line in sys.stdin:
                l.info(input_line)
        h.close()
    else:
        sys.exit(DESCRIPTION)
